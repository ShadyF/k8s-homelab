---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: qbittorrent
  namespace: default
spec:
  interval: 5m
  chart:
    spec:
      chart: qbittorrent
      version: 11.2.0
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.networking.svc.cluster.local/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_DOMAIN}/oauth2/sign_in"
          external-dns/is-public: "true"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
        hosts:
          - host: "qbit.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: qbittorent-tls
            hosts:
              - "qbit.${SECRET_DOMAIN}"
    settings:
      automaticPortSetup: true
    env:
      - name: WAIT_FOR_VPN
        value: "true"
    securityContext:
      runAsUser: 1001
      runAsGroup: 1001
    persistence:
      config:
        enabled: true
        existingClaim: qb-config-pvc
      downloads:
        enabled: true
        existingClaim: nfs-media-downloads-pvc
      shared:
        enabled: true
        type: emptyDir
        mountPath: /shared
    resources:
      requests:
        memory: 250Mi
        cpu: 500m
      limits:
        memory: 5000Mi
    additionalContainers:
      - name: shadowsocks
        image: shadowsocks/shadowsocks-libev:v3.3.5
        command: [ "ss-local" ]
        args: [ "-s",  "185.65.134.66", "-p", "443", "-l", "8888", "-b", "0.0.0.0", "-k", "23#dfsbbb", "-m", "chacha20" ]
        imagePullPolicy: IfNotPresent
#        ports:
#          - containerPort: 1080
#            protocol: TCP
      - name: openvpn
        # repo doesn't contain semver release
        image: qmcgaw/gluetun:v3.19.1
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities:
            add: [ "NET_ADMIN" ]
        env:
          - name: VPNSP
            value: "mullvad"
          - name: COUNTRY
            value: "Netherlands,Italy,Germany,Ireland"
          - name: SHADOWSOCKS
            value: "on"
          - name: SHADOWSOCKS_LOG
            value: "on"
          - name: PROTOCOL
            value: "tcp"
          - name: OPENVPN_IPV6
            value: "on"
          - name: DOT_PROVIDERS
            value: "google"
          - name: TZ
            value: "Africa/Cairo"
        envFrom:
          - secretRef:
              name: openvpn-secrets
        volumeMounts:
          - mountPath: "/shared"
            name: shared
        # Write "connected" to the shared emptyDir to allow qbittorrent to run
        # This should avoid situation where qbittorrent would run before the VPN, causing IP leaks
        # There's no need to handle when the VPN disconnects since the VPN container has a built in killswitch.
        # Moreover, if the container goes down (due to the liveness probe), the pod itself won't run (verify this, saw this behaviour but not 100% sure)
        # See https://docs.k8s-at-home.com/our-helm-charts/common-library-add-ons/#openvpn
        startupProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - grep -q city /gluetun/servers.json && echo "connected" > /shared/vpnstatus
          initialDelaySeconds: 1
          timeoutSeconds: 1
          periodSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - if curl -s https://am.i.mullvad.net/connected | grep -q "You are connected to Mullvad"  ; then exit 0; else exit $?; fi
          initialDelaySeconds: 30
          timeoutSeconds: 8
          periodSeconds: 120
          failureThreshold: 5
          successThreshold: 1
#        readinessProbe:
#          tcpSocket:
#            port: 1080
#          timeoutSeconds: 1
#          periodSeconds: 10
#          failureThreshold: 3
#          successThreshold: 1
